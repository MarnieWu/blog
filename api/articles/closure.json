{"title":"closure","uid":"80f0573b97af3c314928fabd7a5845aa","slug":"closure","date":"2025-01-16T12:15:31.000Z","updated":"2025-01-16T18:36:20.960Z","comments":true,"path":"api/articles/closure.json","keywords":"","cover":[],"content":"<h2 id=\"What-are-Closures\"><a href=\"#What-are-Closures\" class=\"headerlink\" title=\"What are Closures?\"></a>What are Closures?</h2><p>Rust 中的闭包本质是一个匿名函数，它有三个特点：</p>\n<ul>\n<li>可以被存储在变量中</li>\n<li>可以当做参数传给某个函数</li>\n<li>可以当做某个函数的返回值</li>\n</ul>\n<p>这都是普通函数不能做到的，一会儿我们可以写一个对比的例子，先来看下闭包的语法和使用。</p>\n<h2 id=\"Closure-Syntax\"><a href=\"#Closure-Syntax\" class=\"headerlink\" title=\"Closure Syntax\"></a>Closure Syntax</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|parameters| body</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Parameters：参数需要用竖线包裹，可以为空 <code>||</code></li>\n<li>Body：闭包主体，默认需要用 <code>&#123;&#125;</code> 包裹 <code>|...| &#123; ... &#125;</code>，如果只有一句表达式（expression），可以省略括号 <code>|...| println!(&quot;test&quot;)</code></li>\n</ul>\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><h3 id=\"Simple-Closure\"><a href=\"#Simple-Closure\" class=\"headerlink\" title=\"Simple Closure\"></a><strong>Simple Closure</strong></h3><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">add</span> = |a: <span class=\"type\">i32</span>, b: <span class=\"type\">i32</span>| <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> &#123; a + b &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">result</span> = <span class=\"title function_ invoke__\">add</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;The sum is &#123;&#125;.&quot;</span>, result); <span class=\"comment\">// Output: The sum is 5.</span></span><br></pre></td></tr></table></figure>\n\n<p>简单的闭包就和普通函数表现一致，我们定义时也可以不声明类型，按照第一个调用的闭包会产生自动的类型推断。</p>\n<h3 id=\"No-Parameters\"><a href=\"#No-Parameters\" class=\"headerlink\" title=\"No Parameters\"></a>No Parameters</h3><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">greet</span> = || <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">greet</span>(); <span class=\"comment\">// Outputs: Hello, world!</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Capturing-Variables\"><a href=\"#Capturing-Variables\" class=\"headerlink\" title=\"Capturing Variables\"></a>Capturing Variables</h3><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">add_to_x</span> = |y: <span class=\"type\">i32</span>| <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> &#123; y + x &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">result</span> = <span class=\"title function_ invoke__\">add_to_x</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;The result of adding 5 to &#123;&#125; is: &#123;&#125;&quot;</span>, x, result); <span class=\"comment\">// Outputs: The result of adding 5 to 10 is: 15</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Multi-Lines\"><a href=\"#Multi-Lines\" class=\"headerlink\" title=\"Multi Lines\"></a>Multi Lines</h3><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">squared_sum</span> = |x: <span class=\"type\">i32</span>, y: <span class=\"type\">i32</span>| <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">let</span> <span class=\"variable\">sum</span> = x * y;</span><br><span class=\"line\">  \tsum * sum</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">result</span> = <span class=\"title function_ invoke__\">squared_sum</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;Result = &#123;&#125;&quot;</span>, result); <span class=\"comment\">// Outputs: Result = 64</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Capturing-Variables-1\"><a href=\"#Capturing-Variables-1\" class=\"headerlink\" title=\"Capturing Variables\"></a>Capturing Variables</h2><p>闭包和函数最大的差异就是，闭包可以访问其所在作用域内的变量，这被称为变量捕获，捕获有三种形式：</p>\n<ul>\n<li>引用捕获（默认）：闭包对变量进行借用</li>\n<li>可变引用捕获：闭包对变量进行可变的借用</li>\n<li>按值：上两种都是对变量的借用，如果想直接拥有数据的所有权，需要使用 <code>move</code> 关键字转移所有权，所有权转移后的变量不能再后续被使用</li>\n</ul>\n<h3 id=\"Examples-1\"><a href=\"#Examples-1\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><h4 id=\"Capturing-By-Reference（Default\"><a href=\"#Capturing-By-Reference（Default\" class=\"headerlink\" title=\"Capturing By Reference（Default)\"></a>Capturing By Reference（Default)</h4><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">add_to_x</span> = |y: <span class=\"type\">i32</span>| <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> &#123; y + x &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">result</span> = <span class=\"title function_ invoke__\">add_to_x</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;The result of adding 5 to &#123;&#125; is: &#123;&#125;&quot;</span>, x, result); <span class=\"comment\">// Outputs: The result of adding 5 to 10 is: 15</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Capturing-By-Mutable-Reference\"><a href=\"#Capturing-By-Mutable-Reference\" class=\"headerlink\" title=\"Capturing By Mutable Reference\"></a>Capturing By Mutable Reference</h4><p>可变借用的前提是被借用的变量也得是 mutable 的，闭包也定义成 mutable</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">x</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">add_to_x</span> = |y: <span class=\"type\">i32</span>| <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> &#123;</span><br><span class=\"line\">  \tx += <span class=\"number\">5</span>; <span class=\"comment\">// mutation</span></span><br><span class=\"line\">  \tx + y</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">result</span> = <span class=\"title function_ invoke__\">add_to_x</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;x = &#123;&#125;&quot;</span>, x); <span class=\"comment\">// Outputs: x = 15</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Capturing-By-Value（move）\"><a href=\"#Capturing-By-Value（move）\" class=\"headerlink\" title=\"Capturing By Value（move）\"></a>Capturing By Value（<code>move</code>）</h4><p>对于实现了 <code>Copy</code> trait 的数据类型变量的移动和赋值都不会发生所有权转移，是值的复制。所以测试 move 需要使用没有实现 <code>Copy</code> trait 的数据类型</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;Test&quot;</span>); <span class=\"comment\">// no implements Copy trait</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span> = <span class=\"keyword\">move</span> || <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125; is moved&quot;</span>, x);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">foo</span>();</span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, x);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/closure/image-20250117023543133.png\" alt=\"image-20250117023543133\"></p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><img src=\"../images/closure/image-20250116222435474.png\" alt=\"image-20250116222435474\"  />\n\n\n\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 缓存根据用户ID和文章ID渲染的页面。</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">PageCache</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  user_id: T,</span><br><span class=\"line\">  article_id: T,</span><br><span class=\"line\">  page: <span class=\"type\">String</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">for</span> PageCache &#123;</span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">get_page</span>(user_id, article_id) <span class=\"punctuation\">-&gt;</span> page_content &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","text":"What are Closures?Rust 中的闭包本质是一个匿名函数，它有三个特点： 可以被存储在变量中 可以当做参数传给某个函数 可以当做某个函数的返回值...","permalink":"/post/closure","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":9,"path":"api/tags/rust.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#What-are-Closures\"><span class=\"toc-text\">What are Closures?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Closure-Syntax\"><span class=\"toc-text\">Closure Syntax</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Examples\"><span class=\"toc-text\">Examples</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Simple-Closure\"><span class=\"toc-text\">Simple Closure</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#No-Parameters\"><span class=\"toc-text\">No Parameters</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Capturing-Variables\"><span class=\"toc-text\">Capturing Variables</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Multi-Lines\"><span class=\"toc-text\">Multi Lines</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Capturing-Variables-1\"><span class=\"toc-text\">Capturing Variables</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Examples-1\"><span class=\"toc-text\">Examples</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Capturing-By-Reference%EF%BC%88Default\"><span class=\"toc-text\">Capturing By Reference（Default)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Capturing-By-Mutable-Reference\"><span class=\"toc-text\">Capturing By Mutable Reference</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Capturing-By-Value%EF%BC%88move%EF%BC%89\"><span class=\"toc-text\">Capturing By Value（move）</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a></li></ol>","author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"宏 Marcos","uid":"764bca6314ff5edd2be26b3adc313bc1","slug":"marcos","date":"2025-01-13T14:29:24.000Z","updated":"2025-01-15T18:49:58.785Z","comments":true,"path":"api/articles/marcos.json","keywords":"","cover":[],"text":"Declarative macrosWhat is macro_rules!?macro_rules! 用于定义声明式宏（declarative macros）...","permalink":"/post/marcos","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":9,"path":"api/tags/rust.json"}],"author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}